#===============================================================================
#
# VCS DRIVER SHARED LIBRARY
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright 2011-2016 QUALCOMM Technologies Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.qdsp6/2.1/systemdrivers/vcs/build/vcs.scons#1 $
#  $DateTime: 2017/07/21 22:10:47 $
#  $Author: pwbldsvc $
#  $Change: 13907704 $
#
#===============================================================================

import os
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Add API folders
#-------------------------------------------------------------------------------

VCS_BUILD_ROOT = os.getcwd();

env.PublishPrivateApi('SYSTEMDRIVERS_VCS', [
   VCS_BUILD_ROOT + "/../src",
   "${BUILD_ROOT}/core/systemdrivers/vcs/src/RailImpls",
   "${BUILD_ROOT}/core/systemdrivers/vcs/hal/inc",
   "${BUILD_ROOT}/core/systemdrivers/vcs/hal/hw/arch",
   "${BUILD_ROOT}/core/systemdrivers/vcs/hal/src",
   "${BUILD_ROOT}/core/systemdrivers/vcs/config/${CHIPSET}",
   "${BUILD_ROOT}/core/systemdrivers/vcs/image",
])

#-------------------------------------------------------------------------------
# Define paths
#-------------------------------------------------------------------------------

SRCPATH = "../"
SRCPATHSCRIPTS = env['BUILD_ROOT'] + '/core/systemdrivers/vcs/scripts/'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Convert warnings to errors - do not remove this flag!
#-------------------------------------------------------------------------------

env.Append(CFLAGS = "-Werror ")
env.Append(CFLAGS = "-Wall ")

#-------------------------------------------------------------------------------
# Define any features or compiler flags
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

CBSP_API = [
   'DAL',
   'HAL',
   'SERVICES',
   'SYSTEMDRIVERS',
   'PMIC',
   'POWER',
   'KERNEL',
   'DEBUGTRACE',
   'DEBUGTOOLS'
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

#-------------------------------------------------------------------------------
# Define sources
#-------------------------------------------------------------------------------

VCS_SOURCES = [
   '${BUILDPATH}/src/VCSDriver.c',
   '${BUILDPATH}/src/VCSFwk.c',
   '${BUILDPATH}/src/VCSNPA.c',
   '${BUILDPATH}/src/VCSRails.c',
   '${BUILDPATH}/src/RailImpls/VCSRPMhRailImpl.c',
   '${BUILDPATH}/src/RailImpls/VCSStubRailImpl.c',
]

#-------------------------------------------------------------------------------
# Add libraries to image
#-------------------------------------------------------------------------------

env.AddLibrary(
  ['CORE_Q6_ROOT'],
  '${BUILDPATH}/VCS',
  VCS_SOURCES)

#-------------------------------------------------------------------------------
# Pack out files
#-------------------------------------------------------------------------------

# Remove documentation source files
DOCSRC_FILES = env.FindFiles(
  ['*'],
  '${BUILD_ROOT}/core/api/systemdrivers/docsrc/vcs/')
env.CleanPack(['CORE_Q6_ROOT'], DOCSRC_FILES)

# Remove target image files
# Leave all files directly under image directory (i.e. not in image sub-directory) out of the pack set
ALL_IMAGE_FILES = env.FindFiles(
  ['*'],
  '../image/*/')
MY_IMAGE_FILES = env.FindFiles(
  ['*'],
  '../image/${IMAGE}/hw/${CHIPSET}')
STUB_IMAGE_FILES = env.FindFiles(
  ['*'],
  '../image/${IMAGE}/hw/stub')
PACK_IMAGE_FILES = list(set(ALL_IMAGE_FILES) - set(MY_IMAGE_FILES) - set(STUB_IMAGE_FILES))
env.CleanPack(['CORE_Q6_ROOT'], PACK_IMAGE_FILES)

#-------------------------------------------------------------------------------
# Register initialization function and dependencies.
#-------------------------------------------------------------------------------

if 'USES_RCINIT' in env:
  RCINIT_IMG = ['CORE_Q6_ROOT']
  env.AddRCInitFunc( 
    RCINIT_IMG,
    {
      'sequence_group' : 'RCINIT_GROUP_0',                     # required
      'init_name'      : 'vcs',                                # required
      'init_function'  : 'vcs_init',                           # required
      'dependencies'   : ['dalsys','npa','rpm','rpmh','cmd_db','pwr_utils_lvl']
    })

#-------------------------------------------------------------------------------
# Invoke chipset build file
#-------------------------------------------------------------------------------

env.LoadSoftwareUnits()

#-------------------------------------------------------------------------------
# Invoke document generation SConscript
#-------------------------------------------------------------------------------

if os.path.exists(env['BUILD_ROOT'] + '/core/api/systemdrivers/docsrc/vcs/SConscript') :
  env.SConscript(
    '${BUILD_ROOT}/core/api/systemdrivers/docsrc/vcs/SConscript',
    exports='env')

#-------------------------------------------------------------------------------
# SWEvent processing
#-------------------------------------------------------------------------------

if 'USES_QDSS_SWE' in env:
  env.Append(CPPDEFINES = ["VCS_TRACER_SWEVT"])
  QDSS_IMG = ['QDSS_EN_IMG']
  events = [
    ['VCS_EVENT_INIT_START',                   'VCS Initialization Start'],
    ['VCS_EVENT_INIT_COMPLETE',                'VCS Initialization Complete'],
    ['VCS_EVENT_RAIL_CORNER_VOTE_RECEIVED',    'VCS Vote Received for Rail = %d, Corner = %d, NAS = %d'],
    ['VCS_EVENT_RAIL_CORNER_VOTE_COMPLETE',    'VCS Vote Complete for Rail = %d, Corner = %d, NAS = %d'],
    ['VCS_EVENT_RAIL_LDO_CORNER_VOTE_RECEIVED','VCS Vote Received for LDO = %d, Corner = %d, Rail = %d'],    
    ['VCS_EVENT_RAIL_VOLTAGE_SET',             'VCS Voltage Set for Rail = %d, Corner = %d, Voltage = %d, NAS = %d'],
    ['VCS_EVENT_RAIL_NAS_WAKEUP',              'VCS NAS Wakeup for Rail = %d, Corner = %d'],
    ['VCS_EVENT_RAIL_NAS_COMPLETE',            'VCS NAS Complete for Rail = %d, Corner = %d'],
    ['VCS_EVENT_LDO_STATE_SET',                'VCS LDO State Set for LDO = %d, State = %d (1 = Enable / 0 = Disable)'],
    ['VCS_EVENT_LDO_VOLTAGE_SET',              'VCS LDO Voltage Set for LDO = %d, Corner = %d, Voltage = %d'],
    ['VCS_EVENT_LDO_RESTRICTION',              'VCS LDO Restrictions for LDO = %d, Num of Restrictions = %d'],
    ['VCS_EVENT_CPR_STATE_REQUEST',            'VCS CPR State Request for Rail = %d, State = %d (1 = Enable / 0 = Disable)'],
    ['VCS_EVENT_RAIL_MODE_CHANGE',             'VCS Mode Change for Rail = %d, Mode = %d, Data = %d']
  ]
  env.AddSWEInfo(QDSS_IMG, events)

if 'QDSS_TRACER_SWE' in env:
  env.SWEBuilder(['${BUILD_ROOT}/core/systemdrivers/vcs/build/${BUILDPATH}/src/VCSSWEventId.h'], None)
  env.Append(CPPPATH = ['${BUILD_ROOT}/core/systemdrivers/vcs/build/${BUILDPATH}/src'])
  
#-------------------------------------------------------------------------------
# Add CMM scripts to T32 menu
#-------------------------------------------------------------------------------

CMM_ARGUMENT = env['CHIPSET']

try:
  env.AddCMMScripts ('QDSP6', [SRCPATHSCRIPTS], { 'VCS.cmm' : ['VCS'] }, 'SystemDrivers')
except:
  pass

