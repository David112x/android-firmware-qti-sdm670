#===============================================================================
#
# CHRE App Coverage 2 dynamic builder scons
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2017 by QUALCOMM Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------

Import('env')
import os

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/chre/chre_app_coverage2/src" 
LIBNAME = 'chre_app_coverage2'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

target_so = '${BUILDPATH}/'+LIBNAME+'.so'
hexagon_root = env.get('HEXAGON_ROOT')
hexgaon_rtos_release = env.get('HEXAGON_RTOS_RELEASE')
hexagon_version = env.get('Q6VERSION')
HEXAGON_LIB_PATH = "{0}/{1}/Tools/target/hexagon/lib/{2}/G0/pic".format(hexagon_root,hexgaon_rtos_release,hexagon_version)
#-------------------------------------------------------------------------------
# Setup env Flags
#-------------------------------------------------------------------------------
env.Replace(ASM_DFLAGS = '-D__V_DYNAMIC__')
env.Replace(CC_DFLAGS = '-D__V_DYNAMIC__')
env.Replace(HEXAGONCC_OPT = ' -O0')    
env.Replace(HEXAGONCC_WARN = '-Wall -Wno-cast-align -Wpointer-arith -Wno-missing-braces -Wno-strict-aliasing -Wstrict-prototypes -Wnested-externs -Werror ')

env.Replace(HEXAGON_UNDEF = ' ')
env.Replace(HEXAGON_LANIND = '-fno-exceptions -fno-strict-aliasing -fno-zero-initialized-in-bss -fdata-sections -fno-signed-char -fdiagnostics-show-option ')    
env.Replace(CFLAGS = ' -G0')
env.Append(SHLINKFLAGS = '-G0 --wrap=malloc --wrap=calloc --wrap=free --wrap=realloc --wrap=memalign --wrap=__stack_chk_fail -call_shared ')
env.Append(SHLINKFLAGS = ' -L{} '.format(HEXAGON_LIB_PATH))

env['SKEL_DEP'] = ' ${BUILD_ROOT}/chre/chre/build/${BUILDPATH}/libchre_slpi_skel.so '

env.Replace(QDSP6OBJS1= '${QDSP6_RELEASE_DIR}/Tools/target/hexagon/lib/${Q6VERSION}/G0/pic/initS.o')
env.Replace(QDSP6OBJS3= '${QDSP6_RELEASE_DIR}/Tools/target/hexagon/lib/${Q6VERSION}/G0/pic/libgcc.a')
env.Replace(QDSP6OBJS4= '${QDSP6_RELEASE_DIR}/Tools/target/hexagon/lib/${Q6VERSION}/G0/pic/finiS.o')

env['SHLINKGRP'] = ' -shared -fPIC -Bsymbolic --start-group $QDSP6OBJS1 $QDSP6OBJS3 $SOURCES.posix $QDSP6OBJS4 $SKEL_DEP --end-group ${HEXAGONLD_MAP_CMD} ${TARGET.posix}.map'

env.Replace(SHLINKCOM="${TEMPFILE('$SHLINK $SHLINKFLAGS $HEXAGON_OUTPUT_CMD $TARGET.posix $SHLINKGRP')}")

env.Depends(target_so, '${BUILD_ROOT}/chre/chre/build/${BUILDPATH}/libchre_slpi_skel.so')

#-------------------------------------------------------------------------------
# Get the required Include directories
#-------------------------------------------------------------------------------
platform_public_apis = [
'PLATFORM_LIBS',
'MOD_TABLE',
'QAIC',
'STDDEF',
'REMOTE',
'HAPSDK',
]

env.PublishPrivateApi('CHRE_APP_COVERAGE2',[
         "${BUILD_ROOT}/chre/chre_app_coverage/inc",
         "${BUILD_ROOT}/chre/chre_app_coverage2/src",
         "${BUILD_ROOT}/chre/chre/src/system/chre/chre_api/include",
         "${BUILD_ROOT}/chre/chre/src/system/chre/chre_api/include/chre_api",
         "${BUILD_ROOT}/chre/chre/src/system/chre/platform/shared/include",
         "${BUILD_ROOT}/chre/chre/src/system/chre/util/include",
])

env.RequirePublicApi(platform_public_apis, area='platform')
env.RequirePrivateApi('CHRE_APP_COVERAGE2')

#-------------------------------------------------------------------------------
# Add CHRE APP COVERAGE specific Define
#-------------------------------------------------------------------------------
CHRE_APP_COVERAGE2_DEFINES = [
           'DEFINES += CHRE_ASSERTIONS_ENABLED', 
           'CHRE_MINIMUM_LOG_LEVEL=CHRE_LOG_LEVEL_DEBUG',
           'NANOAPP_MINIMUM_LOG_LEVEL=CHRE_LOG_LEVEL_DEBUG',
           'CHRE_MESSAGE_TO_HOST_MAX_SIZE=4000',
           'NANOAPP_VENDOR_STRING=\\"QCOM\\"',
           'NANOAPP_NAME_STRING=\\"CHRE_APP_COVERAGE2\\"',
           'NANOAPP_ID=0x2051434f4d00000b',
           'NANOAPP_VERSION=0x0',
]

env.Append(CPPDEFINES = CHRE_APP_COVERAGE2_DEFINES)

#-------------------------------------------------------------------------------
# Setup source files
#-------------------------------------------------------------------------------
chre_app_coverage2_src = [
                        "${BUILDPATH}/chre_app_coverage2.c",
                        "${BUILDPATH}/nanohub_support_lib_dso.c",                       
                       ]

#-------------------------------------------------------------------------------
# Call the build command
#-------------------------------------------------------------------------------
env.AddMySharedLibrary(['ADSP_SHARED_LIBS'], '${BUILDPATH}/'+LIBNAME, chre_app_coverage2_src)

	
