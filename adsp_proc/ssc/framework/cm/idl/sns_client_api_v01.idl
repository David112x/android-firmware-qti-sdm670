/*****************************************************************************
  @FILE
  sns_client_api_v01.idl

  @BRIEF
  QMI Client API to communicate with the Sensors QMI Client Manager: the
  access point for all physical and virtual sensors.

  @DESCRIPTION
  Unified Sensors Service.  Provides access to all available physical and
  virtual sensors available on the system.  Multiple instances of this service
  may be present on a device; lower instance IDs indication typically better
  power consumption.

  All request and indication message payload formats are defined in protocol
  buffer files, and each sensor has a specific format.

  @COPYRIGHT
  Copyright (c) 2016-2017 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
*****************************************************************************/
include "common_v01.idl";

revision 2;

const SNS_CLIENT_SVC_ID = 400;
/**<  QMI Service ID for this Sensors Service */

const SNS_CLIENT_REQ_LEN_MAX = 1000;
/**<  Maximum size of a request message */

const SNS_CLIENT_REPORT_LEN_MAX = 1000;
/**<  Maximum size of a report indication message */

const SNS_CLIENT_JUMBO_REPORT_LEN_MAX = 62000;
/**<  Maximum size of a jumbo report indication message */

//============================================================================
/** @COMMAND SNS_CLIENT
    @BRIEF Send a query to the Sensors subsystem.  An immediate response will
    always be sent, indicating the request receipt.
*/
//============================================================================

//! @MSG     SNS_CLIENT_REQ
//! @TYPE    Request
//! @SENDER  Client
//----------------------------------------------------------------------------

message {
  mandatory uint8 payload<SNS_CLIENT_REQ_LEN_MAX>;
  /**< Protocol Buffer encoded request message buffer; see sns_client.proto
  for a list of available request messages. */

  optional boolean use_jumbo_report;
  /**< By default clients will receive all single and batched events within
  sns_client_report_ind_msg.  Single events larger than SNS_CLIENT_REPORT_LEN_MAX
  will be dropped and not sent; batches of events will be split to fit.  This
  option enables support of sns_client_jumbo_report_ind_msg; events may be
  sent within either indication message.  The payload size is only guaranteed
  to be less than SNS_CLIENT_JUMBO_REPORT_LEN_MAX. */
} sns_client_req_msg;

//! @MSG     SNS_CLIENT_RESP
//! @TYPE    Response
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  mandatory qmi_response_type resp;

  optional uint64 client_id;
  /**< Client ID identifies the client connection.  Generated by service, and
  returned in all sns_client_report_ind_msg.  Will be the same value in all
  sns_client_resp_msg/sns_client_report_ind_msg for this client connection. */
  optional uint32 result;
  /**< Result status of the request; see sns_pb_error_type */
} sns_client_resp_msg;

//============================================================================
/** @COMMAND SNS_CLIENT_REPORT
    @BRIEF Report containing one or more Sensor-generated events
*/
//============================================================================

//! @MSG     SNS_CLIENT_REPORT_IND
//! @TYPE    Indication
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  mandatory uint64 client_id;
  /**< Client ID identifies the client connection.  */

  mandatory uint8 payload<SNS_CLIENT_REPORT_LEN_MAX>;
  /**< Protocol Buffer encoded event message buffer; see sns_client.proto for
  for a list of possible event messages/formats. */
} sns_client_report_ind_msg;

//============================================================================
/** @COMMAND SNS_CLIENT_JUMBO_REPORT
    @BRIEF Report containing one or more Sensor-generated events
*/
//============================================================================

//! @MSG     SNS_CLIENT_JUMBO_REPORT_IND
//! @TYPE    Indication
//! @SENDER  Service
//----------------------------------------------------------------------------

message {
  mandatory uint64 client_id;
  /**< Client ID identifies the client connection.  */

  mandatory uint8 payload<SNS_CLIENT_JUMBO_REPORT_LEN_MAX>;
  /**< Protocol Buffer encoded event message buffer; see sns_client.proto for
  for a list of possible event messages/formats. */
} sns_client_jumbo_report_ind_msg;

//============================================================================
/** @COMMAND QMI_SNS_CLIENT_GET_SUPPORTED_MSGS
    @COMMON_COMMAND QMI_GET_SUPPORTED_MSGS
    @CMD_VERSION 0 */
//============================================================================
/** @MSG QMI_SNS_CLIENT_GET_SUPPORTED_MSGS_REQ
    @COMMON_MSG QMI_GET_SUPPORTED_MSGS_REQ */
//----------------------------------------------------------------------------
/** @MSG QMI_SNS_CLIENT_GET_SUPPORTED_MSGS_RESP
    @COMMON_MSG QMI_GET_SUPPORTED_MSGS_RESP */
//----------------------------------------------------------------------------

//============================================================================
// Service definition
//============================================================================
service SNS_CLIENT_SVC {
  //! @ID QMI_SNS_CLIENT_GET_SUPPORTED_MSGS
  qmi_get_supported_msgs_req                    QMI_SNS_CLIENT_GET_SUPPORTED_MSGS_REQ,
  qmi_get_supported_msgs_resp                   QMI_SNS_CLIENT_GET_SUPPORTED_MSGS_RESP
    = 0x01E;

  //! @ID SNS_CLIENT
  sns_client_req_msg                            SNS_CLIENT_REQ,
  sns_client_resp_msg                           SNS_CLIENT_RESP
   = 0x20;

  //! @ID SNS_CLIENT_REPORT
  sns_client_report_ind_msg                     SNS_CLIENT_REPORT_IND
    = 0x21;

  //! @ID SNS_CLIENT_JUMBO_REPORT
  sns_client_jumbo_report_ind_msg               SNS_CLIENT_JUMBO_REPORT_IND
    = 0x22;

} = SNS_CLIENT_SVC_ID;
