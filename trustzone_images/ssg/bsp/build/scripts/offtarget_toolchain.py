# Copyright (c) 2017 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR

import os
import string
import re
import SCons.Action
from SCons.Script import *

def exists(env):
   return True

def generate(env):
  #'PROC' must be in the env at this point
  if env['PROC'] == 'scorpion':
    env['PROC'] = 'x86-32'
  elif env['PROC'] == 'A53_64':
    env['PROC'] = 'x86-64'
  
  env.Append(CPPPATH = [
    "#",
    "#../../build/cust",
    "#../../build/ms",
  ])
  
  #os.environ['PATH'] is a string, where paths are separated by ':' (linux) and ';' (windows)
  if env['PLATFORM'] in ['windows', 'win32']:
    separator=';'
  elif env['PLATFORM'] == 'linux':
    separator=':'
    
  search_paths = os.environ['PATH'].split(separator)
  clang_search_paths = ['/pkg/qct/software/clang/3.9.1/bin'] + search_paths
  gcc_search_paths   = ['/pkg/qct/software/gnu/gcc/7.2.0/bin'] + search_paths
  
  if env.WhereIs('clang', path=clang_search_paths):
    env.Replace(CC        = env.WhereIs("clang",       path = clang_search_paths))
    env.Replace(CXX       = env.WhereIs("clang++",       path = clang_search_paths))
    env.Replace(AR        = env.WhereIs("llvm-ar",     path = clang_search_paths))
    env.Replace(NMBIN     = env.WhereIs("llvm-nm",     path = clang_search_paths))
    #env.Replace(LINK      = env.WhereIs("ld.lld",      path = clang_search_paths))
    env.Replace(RANLIB    = env.WhereIs("llvm-ranlib", path = clang_search_paths))
    env.Replace(AS        = env.WhereIs("llvm-as",     path = clang_search_paths))
  elif env.WhereIs('gcc', path=gcc_search_paths):
    env.Replace(CC        = env.WhereIs("gcc",    path = gcc_search_paths))
    env.Replace(CXX        = env.WhereIs("g++",    path = gcc_search_paths))
    env.Replace(AR        = env.WhereIs("ar",     path = gcc_search_paths))
    env.Replace(NMBIN     = env.WhereIs("nm",     path = gcc_search_paths))
    #env.Replace(LINK      = env.WhereIs("ld",     path = gcc_search_paths))
    env.Replace(RANLIB    = env.WhereIs("ranlib", path = gcc_search_paths))
    env.Replace(AS        = env.WhereIs("as",     path = gcc_search_paths))
  else:
    print "ERROR: cannot find a suitable compiler in PATH!"
    sys.exit(1)
    
  print 'cc',env['CC']

  env.Replace(NM = "${PYTHONCMD} ${BUILD_SCRIPTS_ROOT}/nm.py")
  env.Replace(PPASM = "${PYTHONCMD} ${BUILD_SCRIPTS_ROOT}/ppasm.py -g ")

  env.Replace(INCPREFIX = "-I")
  env.Replace(CPPDEFPREFIX  = "-D")
  env.Replace(OBJSUFFIX = ".o")

  env.Replace(LIBPREFIX = "")
  env.Replace(LIBSUFFIX = ".lib")
  env.Replace(LIBSUFFIXES = ['.lib', '.l', '.a'])
  env.Replace(LIBLINKPREFIX = "")
  env.Replace(DO_NOT_USE_LIBLINKSUFFIX = "")
  env.Replace(LIBDIRPREFIX = "-L ")
  env.Replace(PROGSUFFIX='.elf') 

  if env['PLATFORM'] in ['windows', 'win32']:
    env.Replace(MAXLINELENGTH = 32000)
  else:
    env.Replace(MAXLINELENGTH = 100000)

  env.Replace(TEMPFILEPREFIX = "@")
  env.Replace(TEMPFILESUFFIX = "")

  env.Replace(CCFLAGS = " -Wno-error $CFLAGS ")
  env.Replace(CXXFLAGS = "   ")
  env.Replace(ASCPPFLAGS = " ")
  env.Replace(ASFLAGS = " ")
  env.Replace(ARFLAGS = " -rcD  ")
 
  if env['PROC'] == 'x86-32':
    env.Append(CCFLAGS= ' -m32 ')
    env.Append(LINKFLAGS= ' -m32 ')
  else:
    env.Append(CCFLAGS= ' -m64 ')
    env.Append(LINKFLAGS= ' -m64 ')
   
  #Allow debugging for all symbols (for now)
  env.Append(CCFLAGS= ' -g ')
  env.Append(CCFLAGS=' -DCUST_H=\\"${CUST_H}\\" ')
 
  CCCOM = "${TEMPFILE('$CC $CCFLAGS  $_CCCOMCOM -I/usr/include/x86_64-linux-musl/  -Wno-error -c $SOURCES -o $TARGET ')}"

  env.Replace(CCCOM =       CCCOM)
  env.Replace(CCPPCOM =     CCCOM.replace('-c','-E -xc'))
  env.Replace(CCCOMCPY =    CCCOM)
  env.Replace(CCPPCLCOM =   "$PPASM -f $SOURCES -o $TARGET")
  env.Replace(CCPPCL_ACOM = "$PPASM -f ${TARGET}.pp -o ${TARGET}.i")

  CXXCOM = "${TEMPFILE('$CXX $CXXFLAGS $CCFLAGS $_CCCOMCOM  -c $SOURCES -o $TARGET')}"
  env.Replace(CXXCOM =       CXXCOM)
  env.Replace(CXXCOMCPY =    CXXCOM)
  env.Replace(CXXPPCOM =     CXXCOM.replace('-c','-E -xc++'))
  env.Replace(CXXPPCLCOM =   env['CCPPCLCOM'])
  env.Replace(CXXPPCL_ACOM = env['CCPPCL_ACOM'])

  env.Replace(ARCOM =      "${TEMPFILE('$AR $ARFLAGS $TARGET $SOURCES')}")
    
  env.Replace(ASCPPCOM =  "$CC $ASCPPFLAGS $_CCCOMCOM -E -xc $SOURCES -o ${TARGET}.pp")
  env.Replace(ASASCOM =   "$AS $ASFLAGS ${TARGET}.i -o $TARGET")

  AsmPreprocessAction = SCons.Action.Action('${TEMPFILE("$ASCPPCOM")}', '$ASCPPCOMSTR')
  AsmCleanAction = SCons.Action.Action('$CCPPCL_ACOM', '$CCPPCLCOM_ASTR')
  AsmAssemblyAction = SCons.Action.Action('${TEMPFILE("$ASASCOM")}', '$ASASCOMSTR')

  env.Replace(ASCOM = [
    AsmPreprocessAction,                   # C pre-process assembly files
    AsmCleanAction,                        # Removed junck generated by C preprocess
    AsmAssemblyAction,                     # Do the actuall assymbly
  ])

  env.LoadToolScript("${BUILD_SCRIPTS_ROOT}/comcc_addt.py")

  env.Tool('fastcpp')
  
  


