// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.
// Qualcomm Technologies Proprietary and Confidential.

interface IMacchiato {

  /**
   * sign service data with the device Machhiato private key.
   *
   * @param[in]  serviceData - buffer that contains the service data to be signed.
   * @param[in/out]  signedServiceData   - buffer (also allocated by the calling app) to fill the signature output
   * @param[out]  pu32SignedServiceDataLen  - the length of the signature output in bytes.
   * @return MACCHIATO_SUCCESS on success
   */

  method signServiceData(in buffer serviceData, out buffer signedServiceData, out uint32 pu32SignedServiceDataLen, out uint32 retErrCode);

  /**
   * authenticate the device using challenge response with Machhiato private key  
   *
   * @param[in]   serviceNonce   - buffer that contains the authentication challenge.
   * @param[in]   opaqueData     - buffer that contains additional opaque data to be signed (optional).
   * @param[in/out]  signedChallengeResponse   - buffer (also allocated by the calling app) to fill the challenge response output
   * @param[out]  pu32SignedChallengeResponseLen  - the length of the challenge response output in bytes.
   * @return MACCHIATO_SUCCESS on success
   */

  method authenticate_device(in buffer serviceNonce, in buffer deviceNonce, in buffer opaqueData, out buffer signedChallengeResponse, out uint32 pu32SignedChallengeResponseLen, out uint32 retErrCode);

  /**
   * get the unwrapped service key from the Macchiato provisioning message
   *
   * @param[in]   provisionMsg          - buffer that contains the provisioning message
   * @param[in/out]   unwrappedKey - A buffer to contain the unwrapped service key, the maximum size should be known to the calling application.
   * @param[out]      pu32UnwarppedKeyLen
   * @param[in]       deviceNonce - deviceNonce passsed in to compare with the nonce embedded in provision message.
   * @return MACCHIATO_SUCCESS on success
   */

  method provision_service_key(in buffer provisionMsg, out buffer unwrappedKey, out uint32 pu32UnwarppedKeyLen, in buffer deviceNonce, out uint32 retErrCode);

  /**
   * get the public key point
   *
   * @param[in/out]   Buffer to contain public signing key point
   * @param[out]      PublicKeyDataLen
   * @param[in]       PubKeyType, public key type to be obtained
   * @return MACCHIATO_SUCCESS on success
   */

  method getPublicKeyPoint(out buffer PublicKeyData, out uint32 PublicKeyDataLen, in uint32 PubKeyType, out uint32 retErrCode);
};