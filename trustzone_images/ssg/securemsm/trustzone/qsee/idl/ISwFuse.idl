// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.
// Qualcomm Technologies Proprietary and Confidential.

interface ISwFuse {

  const int32 ID_HLOS_IMG_TAMPER   = 0;
  /**< Used during boot to determine
       if the HLOS image has successfully
       been authenticated. */

  const int32 ID_WINSECAPP_LOADED  = 1;
  /**< Used by WinSec App to prevent reloading. */

  const int32 ID_UEFISECAPP_LOADED = 2;
  /**< Used by UefiSecApp to prevent reloading. */

  const int32 STATUS_SECBOOT_ENABLING_CHECK_FAILED = 1;
  const int32 STATUS_SEC_HW_KEY_NOT_PROGRAMMED     = 2;
  const int32 STATUS_DEBUG_DISABLE_CHECK_FAILED    = 4;
  const int32 STATUS_ANTI_ROLLBACK_CHECK_FAILED    = 8;
  const int32 STATUS_FUSE_CONFIG_CHECK_FAILED      = 16;
  const int32 STATUS_RPMB_PROVISIONED_CHECK_FAILED = 32;

  /**
   * blowSwFuse:  Blow the input SW fuse
   *
   * @param[in] fuse             the SW fuse to blow
   * @return                     Object_OK on success
   */

  method blowSwFuse( in int32 fuse );

  /**
   * isSwFuseBlown:  Test whether the specified SW fuse is blown
   *
   * @param[in]  fuse_num       The SW fuse to query
   * @param[out] is_blown       Whether the given fuse has been blown
   * @param[in]  is_blown_sz    Size of the return pointer
   * @return                    E_SUCCESS on success. Negative on failure.
   */

  method isSwFuseBlown( in int32 fuse, out uint32 isBlown );

  /**
   * getSecureState: check security status on the device
   *
   * @param [out] status1   The security status
   *                        Bit 0: secboot enabling check failed
   *                        Bit 1: Sec HW key is not programmed
   *                        Bit 2: debug disable check failed
   *                        Bit 3: Anti-rollback check failed
   *                        Bit 4: fuse config check failed
   *                        Bit 5: rpmb provisioned check failed 
   *                        Bits 6-31: reserved
   * @param [out] status2   The security status
   *                        Bits 0-31: reserved
   *
   * @return 0 on call success
   */
  method getSecureState(out uint32 status1, out uint32 status2);
};
