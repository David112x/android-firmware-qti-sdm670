// Copyright (c) 2015 - 2017 Qualcomm Technologies, Inc.  All Rights Reserved.
// Qualcomm Technologies Proprietary and Confidential.

interface IESEService
{
  //--------------------------------------------------------
  //  IESEService error codes
  //--------------------------------------------------------
  error STATUS_ERROR_BAD_STATE;           /**< QCOM: Tried to resume a blocked API when it was not in a pending state */
  error STATUS_ERROR_BAD_PARAMETERS;      /**< Bad arguments supplied to the API call */
  error STATUS_ERROR_ITEM_NOT_FOUND;      /**< Handle supplied cannot be found */
  error STATUS_ERROR_OUT_OF_MEMORY;       /**< Out of memory when creating new handles */
  error STATUS_ERROR_COMMUNICATION;       /**< Problems with SPI communication */
  error STATUS_ERROR_SHORT_BUFFER;        /**< Read buffer supplied not big enough for message received */
  error STATUS_ERROR_ACCESS_CONFLICT;     /**< Multiple clients trying to access same resource */
  error STATUS_ERROR_ACCESS_DENIED;       /**< Access Control Enforcer: no APDU access allowed */
  error STATUS_ERROR_TIMEOUT;             /**< Timeout waiting for a response from Secure Element */

  /**
   * Perform the Secure Element Access Control based on Application Identifier
   *
   * @param [in] aid    The Applet Application Identifier
   * @param [in] apdu   The APDU in which SEAC filtering should be applied
   *                    NULL means no APDU filtering should not be applied
   *
   * @return Object_OK on success. Otherwise access is denied
   */

  method seac(in buffer aid, in buffer apdu);

  /**
   * Writes to slave data on the logical connection handle.
   *
   * @param[in] capdu  Write buffer information
   *
   * @return Object_OK on success
   */
  method write(in buffer capdu);

  /**
   * Reads from slave data on the logical connection handle.
   *
   * @param[out]   rapdu         Read buffer information
   *
   * @return Object_OK on success
   */
  method read(out buffer rapdu);

  /**
   * Get the value of the OEM Configuration given the identifier
   *
   * @param[in]    id    Unique identifier for the Secure Element property
   * @param[out]   mask  Property value
   *
   * @return Object_OK on success
   */
  method getOemProperty(in uint32 id, out uint32 value);
};
