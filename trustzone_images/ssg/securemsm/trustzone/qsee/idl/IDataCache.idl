// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.
// Qualcomm Technologies Proprietary and Confidential.

/**
 * IDataCache provides virtual address-based CPU data cache management
 * operations.  These operations clean and/or invalidate to the Point of
 * Coherency.
 *
 * This interface uses buffer arguments in an exceptional manner.  It is
 * used in scenarios where the caller of this interface is executing in a
 * process and the implementation resides in the kernel.  The implementation
 * makes use of the client-supplied bufffer address, *not* the content of
 * the buffers (as is the case for every other interface).
 */

interface IDataCache {

  /**
   * Cleans a memory region in the cache. Please note that this will
   * write back any data that is dirty but it will not invalidate the
   * cache region, so any further accesses to data in this region would
   * result in a cache-hit.
   *
   * @param[out] region The memory region to clean
   * @return Object_OK on success
   */

  method cleanRegion(out buffer region);

  /**
   * Cleans and invalidates a memory region in the cache. Please note
   * that the data in the cache would be written back to main memory if
   * dirty and the region invalidated. So any further access to the data
   * would result in a cache-miss.
   *
   * @param[out] region The memory region to clean and invalidate
   * @return Object_OK on success
   */

  method cleanAndInvalidateRegion(out buffer region);

  /**
   * Invalidate a memory region in the cache. Please note that the data
   * in the cache will not be written back to the main memory. However,
   * any further accesses to data in this region would result in a
   * cache-miss.
   *
   * @param[int] region The memory region to invalidate
   * @return Object_OK on success
   */

  method invalidateRegion(in buffer region);
};
