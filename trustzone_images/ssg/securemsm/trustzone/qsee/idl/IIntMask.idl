// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights
// Reserved.  Qualcomm Technologies Proprietary and Confidential.

interface IIntMask {
  /** Returned when unsupported bits are passed into mask
      parameters. */
  error ERROR_UNSUPPORTED_INTERRUPT_BIT;
  /** Returned when an app tries to unmask IRQs for an atomic secure
      service call. */
  error ERROR_MAY_NOT_UNMASK_IRQ;

  /**
   * Supported values for the interrupt mask parameters
   */
  const uint32 FIQ            = 0x1;
  const uint32 IRQ            = 0x2;
  const uint32 SError         = 0x4;
  const uint32 DebugException = 0x8;

  /**
   * Modify the system behavior to allow or prevent interrupts.
   *
   * param[out] restoreMask Bit mask that may be passed to
   *                        restoreInterrupts() to restore the state
   *                        of the system to the state prior to
   *                        calling this API.
   *
   * @return Object_OK on success
   */
  method disableAllInterrupts(out uint32 restoreMask);

  /**
   * Modify the system behavior to allow or prevent interrupts.
   *
   * param[in] intMask Bit mask of different interrupt sources to
   *                   disable.  A value of one for each interrupt
   *                   source masks that interrupt source.  A value of
   *                   zero for each interrupt source unmasks that
   *                   interrupt source.
   *
   * @return Object_OK on success
   */
  method setIntMask(in uint32 intMask);

  /**
   * Returns the current status of interrupt masking.
   *
   * param[out] intMask Bit mask that represents the current state of
   *                    interrupt masking.  A value of one for each
   *                    interrupt source indicates the interrupt
   *                    source is masked.  A value of zero indicates
   *                    the interrupt source is not masked.
   *
   * @return Object_OK on success
   */
  method getIntMask(out uint32 intMask);
};
