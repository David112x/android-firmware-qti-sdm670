// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.
// Qualcomm Technologies Proprietary and Confidential.

interface ISecureChannel {

   const uint32 SUBSYSTEM_ID_TZ          = 0;
   const uint32 SUBSYSTEM_ID_MPSS        = 1;
   const uint32 SUBSYSTEM_ID_LPASS       = 2;
   const uint32 SUBSYSTEM_ID_WCNSS       = 3;
   const uint32 SUBSYSTEM_ID_UNSUPPORTED = 127;  // 0x7F

   const uint32 CLIENT_ID_SSM         = 0;
   const uint32 CLIENT_ID_UIM         = 1;
   const uint32 CLIENT_ID_UNSUPPORTED = 127;  // 0x7F

   /**
    * @brief
    * This is used to secure the the input message
    *
    * @details
    * The output buffer should be large enough to hold the encrypted message
    * and some internal headers and possible padding. Recommended output buffer size
    * is at least input message size + 100 bytes. The memory has to be managed by the caller.
    *
    * @param[in] susbystemId    Subsystem ID
    * @param[in] clientId       Client ID
    * @param[in] input          Pointer to the plaintext data.
    * @param[out] output        Pointer to the buffer to hold the secure blob
    *                           (memory provided by the caller)
    *
    * @return Object_OK on success
    *
    * @dependencies
    * Secure Channel has to be established successfully.
    *
    * @sideeffects
    * None
    */

   method secureMessage(in uint32 subsystemId, in uint32 clientId, in buffer input, out buffer output);

   /**
    * @brief
    * This is used to authenticate and decrypt the secure blob
    *
    * @details
    * The output buffer should be large enough to hold the decrypted message.
    * Recommended output buffer size is at least input size.
    * The memory has to be managed by the caller.
    *
    * @param[in] subsystemId   Subsystem ID
    * @param[in] clientId      client ID
    * @param[in] input         Pointer to the secure blob.
    * @param[out] output       Pointer to the buffer to hold the decrypted data
    *                          (memory provided by the caller)
    *
    * @return Object_OK on success
    *
    * @dependencies
    * Secure Channel has to be established successfully.
    *
    * @sideeffects
    * None
    */

   method authenticateDecryptMessage(in uint32 subsystemId, in uint32 clientId, in buffer input, out buffer output);
};
