/** @file  INSMem.idl */

/* Copyright (c) 2015-2017 Qualcomm Technologies, Inc.  All Rights Reserved.
   Qualcomm Technologies Proprietary and Confidential. */



interface INSMem {
/** @cond */
  error INVALID;/** @endcond */

/**
 * @addtogroup core
 * @{
*/
/** Checks whether a range of memory is completely within secure memory that is
    tagged for a use case.
    
    @param [in] tag Domain that has access to the protected memory region.

    @param [in] start Start of the memory area (included in the range).

    @param [in] size Number of bytes in the memory area.
    
    @return
    Object_OK if the entire area is in secure memory, INSMem_INVALID otherwise.
 */
  method isSecureTaggedRange(in uint32 tag, in uint64 start, in uint64 size);

/** Checks whether the specified memory range is completely in non-secure memory.
    
    @param [in] start Starting address of the region. Zero is a valid value.

    @param [in] size  Number of bytes in the region.
    
    @return
    Object_OK if the entire area is in secure memory, INSMem_INVALID otherwise.
 */
  method isNSRange(in uint64 start, in uint64 size);

/** Counts the number of pages that are tagged as secure display memory.

    @param [in] tag  Domain that has access to the protected memory region.

    @param [out] usageInPages  Number of pages.

    @return
    Object_OK if the entire area is in secure memory, INSMem_INVALID otherwise.
 */
  method countMemUsage(in uint32 tag, out uint32 usageInPages);
/** @} */ /* end_addtogroup core */

/** @cond */
/* Tags the memory provided for a specific use-case.

    @param [in] tag   Domain which should have access to the protected memory region.

    @param [in] start Start of the memory area (included in the range).

    @param [in] end   End of the memory area (excluded in the range).

    @return Object_OK if the entire area successfully tagged for the use case,
            INSMem_INVALID otherwise.
 */
  method tagMem(in uint32 tag, in uint64 start, in uint64 end);
/** @endcond */
};


