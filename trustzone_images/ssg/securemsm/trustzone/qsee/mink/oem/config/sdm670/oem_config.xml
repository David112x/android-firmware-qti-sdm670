<driver name="NULL">
  <global_def>
      #ifdef USES_KEY_OVERRIDES
	<var_seq name="pub_mod" type=DALPROP_DATA_TYPE_STRING>D9591A74B9D315817A1FFACD276845B2FC2795A48977CC6F531B7B82E80DBCCCC03776F01358ED3CFA238FEAC713F4B4A68EB95CF3EC165DD2DC74D91876E27BE211648782BCB590C93493E4B1AAAD7997BE1BAEA7ECF1B5A869C8E5B548741A5D2F1DCF1464424A89997A86F01BA95CA6F22208D5387DB31CF0E6A1D41D8FED450FBC4CE66BA1FA1A1736E13E7243A29BE7EF0785F74212DD188D461335F6EEF4F6F76E4592F390F4F71D5D0950B2FAD947601FE856F724D1517D9FD3E680ED1C4EB5625C1A05FD9868B60DB6AFB88D0A447D4EA6B970BBC74A983DDC0A40E991525DB636AA06E4E66B0ADC3144D810CF74CEAD927FE6EC2728253E4A0FCE5B
        </var_seq>
	<var_seq name="pub_exp" type=DALPROP_DATA_TYPE_STRING>0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001
	</var_seq>
       #endif
  </global_def>
  <device id="/tz/oem">
    <props name="OEM_keystore_enable_rpmb" type=DALPROP_ATTR_TYPE_UINT32>
      1
    </props>
    <props name="OEM_keystore_wrong_passwd_penalty" type=DALPROP_ATTR_TYPE_UINT32>
      2000
    </props>
    <props name="OEM_keystore_retain_wrong_passwd_attempt" type=DALPROP_ATTR_TYPE_UINT32>
      1
    </props>
    <props name="OEM_counter_enable_rpmb" type=DALPROP_ATTR_TYPE_UINT32>
      1
    </props>

    <!-- Note !!! The OEM_allow_rpmb_key_provision property is used
         for the below condition only: !!!  A customer wants to
         replace the storage part (eMMC/UFS), but since RPMB key
         provision fuse is blown, RPMB auto production key provision
         wont happen for the new part.

         The return TRUE value can override RPMB key provision fuse
         and let RPMB be provsioned with the new storage part (1 =
         Re-provisioning allowed in XBL and HLOS, 2 = Re-provisioning
         allowed in XBL only)

         This functions MUST always return FALSE for production
         devices.  Otherwise the security of the RPMB will be
         compromised -->
    <props name="OEM_allow_rpmb_key_provision" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>
    <props name="OEM_disable_rpmb_autoprovisioning" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>
    <props name="OEM_sec_wdog_bark_time" type="0x00000002">
      6000
    </props>
    <props name="OEM_sec_wdog_bite_time" type=DALPROP_ATTR_TYPE_UINT32>
      22000
    </props>
    <props name="OEM_reset_reason_list" type=DALPROP_ATTR_TYPE_STRUCT_PTR>
      oem_rst_reason_list
    </props>
    <props name="OEM_l2_wa_enable" type="0x00000002">
    1
    </props>

    <!-- RoT transfer: enable feature and provide pk_hash1/encryption
         key1 fuse data -->
    <props name="OEM_rot_enable_transfer_APPS" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>
    <props name="OEM_rot_enable_transfer_MODEM" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>
    <props name="OEM_rot_pk_hash1_fuse_values" type=DALPROP_ATTR_TYPE_BYTE_SEQ>
      0x00, end
    </props>
    <!-- RoT transfer: END-->

    <!-- PIL load region information -->
    <props name="OEM_pil_secure_app_load_region_size" type=DALPROP_ATTR_TYPE_UINT32>
#ifdef USES_QCS605_OVERRIDES
      0x00800000
#else
      0x02200000
#endif
    </props>
    <props name="OEM_pil_subsys_load_region_start" type=DALPROP_ATTR_TYPE_UINT32>
#ifdef USES_QCS605_OVERRIDES
      0x8B800000
#else
      0x8AB00000
#endif
    </props>
    <props name="OEM_pil_subsys_load_region_size" type=DALPROP_ATTR_TYPE_UINT32>
#ifdef USES_QCS605_OVERRIDES
      0x7200000
#elif USES_SECDSP_OVERRIDES
      0x0C717000
#else
      0xB700000
#endif
    </props>
    <props name="OEM_pil_enable_clear_pil_region" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>

    <!-- Mark 3rd party signed secure applications sandboxed by default -->
    <props name="OEM_app_sandbox_default" type=DALPROP_ATTR_TYPE_UINT32>
      1
    </props>

    <!-- Whether to bypass the meltdown hw vulnerability workaround  -->
    <!-- 1 - Bypass all meltdown mitigations -->
    <!-- 0 - Enable all meltdown mitigations -->
    <props name="OEM_bypass_meltdown_mitigation" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>

    <!-- Mark 3rd party signed secure applications sandboxed by default -->
    <props name="OEM_enablecrashdumps_before_arb" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>
    <!--Public key for MD feature -->
    #ifdef USES_KEY_OVERRIDES
      <props name="OEM_pub_mod" type=DALPROP_ATTR_TYPE_STRING_PTR>
        pub_mod
      </props>
      <props name="OEM_pub_exp" type=DALPROP_ATTR_TYPE_STRING_PTR>
        pub_exp
      </props>
    #endif

    <!-- MRC 2.0: provision to update activation/revocation list and
         enable/disable MRC list provisioning -->
    <!-- Activation, revocation list updates are restricted to lower
         nibble(4 bits) of the data structure -->
    <props name="OEM_MRC_activation_list" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>
    <props name="OEM_MRC_revocation_list" type=DALPROP_ATTR_TYPE_UINT32>
      0
    </props>
    <!-- MRC 2.0: END-->
    <!-- Enable TZ counter measure for hlos boot tampering -->
    <props name="OEM_counter_measure_enable" type=DALPROP_ATTR_TYPE_UINT32>
      1
    </props>

	<!-- providing the provision for OEM to choose different image encryption key
		generate the l1 key along with fec bits and put the value here
		if we blow the l1key without FEC, device boot-up  will be failed
		e.g. if image encryption key is 0x6c 0x26 0x13 0x28 0x5e 0x45 0x22 0xef 0x9e 0x67 0x81 0x04 0xb5 0x34 0x96 0x56
		then the generated image encryption key with fec bits are like below
		0x6c, 0x26, 0x13, 0x28, 0x5e, 0x45, 0x22, 0x7f,
        0xef, 0x9e, 0x67, 0x81, 0x04, 0xb5, 0x34, 0x00,
	    0x96, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52,
	-->
	<props name="oem_image_encryption_key1" type="uint8" array="True">
    {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    }
	<!-- if we are going for alternate encryption/decryption method, set oem_image_encryption_key1_sel to '1' -->
    </props>
	<props name="oem_image_encryption_key1_sel" type=DALPROP_ATTR_TYPE_UINT32>
		0
	</props>
	
  </device>

  <!-- Embedded Secure Element information information -->
  <device id="05B04A44-BF30-42DF-9E2F-B366B980ED19"> <!-- eseservice TA UUID -->
    <!-- The SPI device ID which maps on to the BLSP QUP core use -->
    <props name="OEM_ese_spi_device_id" type=DALPROP_ATTR_TYPE_UINT32>
      0x00
    </props>
    <!-- The Chip Select index (0 to 3) on with Secure Element is
         connected -->
    <props name="OEM_ese_spi_chip_select_id" type=DALPROP_ATTR_TYPE_UINT32>
      0x00
    </props>
    <!-- SPI clock frequency as detailed in the Secure Element T=1
         specification -->
    <props name="OEM_ese_spi_max_frequency" type=DALPROP_ATTR_TYPE_UINT32>
      9600000
    </props>
    <!-- The bits per word transmitted from/to the Interface device
         over SPI -->
    <props name="OEM_ese_spi_bits_per_word" type=DALPROP_ATTR_TYPE_UINT32>
      8
    </props>
    <!-- NAD for commands to Secure Element. Should be changed to 0x00
         for NQ220 -->
    <props name="OEM_ese_spi_nad_command" type=DALPROP_ATTR_TYPE_UINT32>
      0x5A
    </props>
    <!-- NAD for responses from the secure element -->
    <props name="OEM_ese_spi_nad_response" type=DALPROP_ATTR_TYPE_UINT32>
      0xA5
    </props>
    <!-- 0x00000001 - Enable QSEE Secure Element Access Control -->
    <!-- 0x00000002 - Enable QSEE Secure Element Access Control APDU
                      Filtering -->
    <!-- 0x00000004 - Allow SELECT Command for GP TEE SE API
                      TEE_SEChannelTransmit -->
    <!-- 0x00000008 - Support for SPI Soft Reset of ESE -->
    <!-- 0x00000010 - Support sending SPI end of APDU session command -->
    <!-- 0x00000020 - Block access to Secure Element basic channel -->
    <!-- 0x00000040 - Block access to Secure Element default applet -->
    <!-- 0x00000080 - Use multi-byte NAD when polling for response -->
    <!-- 0xFFFFFFFF - All features mask -->
    <props name="OEM_ese_feature_mask" type=DALPROP_ATTR_TYPE_UINT32>
      0x00000088
    </props>
    <!-- 0x000007FF - Mask for Secure Element BWT - 1624ms maximum -->
    <!-- 0x000FF000 - Mask for Secure Element Response polling time - default 50ms -->
    <!-- 0x00F00000 - Delay(100us resolution) when polling after chained frame default 0us -->
    <!-- 0x0F000000 - Delay(100us resolution) when polling for NAD default 0us -->
    <props name="OEM_ese_timers" type=DALPROP_ATTR_TYPE_UINT32>

      0x00032658
    </props>
  </device>

  <device id="wdog">
    <!-- Start of TA Watchdog configuration -->
    <!-- Watchdog flags: 0x00000001 - Enable in Full HLOS builds -->
    <!--                 0x00000002 - Enable in UEFI-TZT builds  -->
    <props name="OEM_wdog_flags"              type=DALPROP_ATTR_TYPE_UINT32>
      0x00000000
    </props>
    <!-- Milliseconds allowed for TA thread resume to initial ACCEPT -->
    <props name="OEM_wdog_ms_initial"         type=DALPROP_ATTR_TYPE_UINT32>
      1500
    </props>
    <!-- Milliseconds allowed for TA thread to process incoming invocation -->
    <!-- in a normal full HLOS build                                       -->
    <props name="OEM_wdog_ms_accept_hlos"     type=DALPROP_ATTR_TYPE_UINT32>
      60000
    </props>
    <!-- Milliseconds allowed for TA thread to process incoming invocation -->
    <!-- in a UEFI-TZT build                                               -->
    <props name="OEM_wdog_ms_accept_uefitzt"  type=DALPROP_ATTR_TYPE_UINT32>
      120000
    </props>
    <!-- End of TA Watchdog configuration -->
  </device>
</driver>
