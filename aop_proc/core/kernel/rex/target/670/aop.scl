/*
#====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
#
#                     SCATTER LOADING DESCRIPTION FILE
#
#  Copyright (c) 2014-2017 by Qualcomm Technologies, Inc. All Rights Reserved.
#  QUALCOMM Proprietary and Confidential.
#
#  GENERAL DESCRIPTION
#
#  The scatter loading description file is used to define the AOP memory map.
#
#*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/

#define AOPSS_CODE_START      0x0
#define AOPSS_CODE_SIZE       0x18000           // 96 KB
#define AOPSS_DATA_START      0xE0000
#define AOPSS_DATA_SIZE       0x8000           // 32 KB
#define AOPSS_CODE_END        (AOPSS_CODE_START + AOPSS_CODE_SIZE)

#define AOPSS_DATA_END        (AOPSS_DATA_START + AOPSS_DATA_SIZE)

#define AOP_LOG_SIZE 0x600 /*2kB*/
#define DDR_LOG_SIZE 0x458 /*1kB*/

#define AOPSS_HEAP_SIZE       0x2000 /* 8kB */
#define AOPSS_HEAP_END        AOPSS_CODE_END - (AOP_LOG_SIZE + DDR_LOG_SIZE)
#define AOPSS_LOG_START		AOPSS_HEAP_END
#define DDR_LOG_START         AOPSS_LOG_START + AOP_LOG_SIZE
#define AOPSS_HEAP_START      (AOPSS_HEAP_END - AOPSS_HEAP_SIZE)

#define AOPSS_HEAP_STACK_GUARD_BAND 32



#define AOPSS_INIT_STACK_SIZE 0x300  /* 768 bytes */
#define AOPSS_INIT_STACK_END  AOPSS_DATA_END
#define AOPSS_INIT_STACK_START (AOPSS_INIT_STACK_END - AOPSS_INIT_STACK_SIZE - AOPSS_HEAP_STACK_GUARD_BAND)



#define AOPSS_RINIT_START    (0x85FC0000)
#define AOPSS_RINIT_END      (0x85FE0000)
#define AOPSS_PMIC_START     (0x85FD0000)

ENTRY(Reset_Handler)

PHDRS
{
  AOPSS_CODE PT_LOAD;
  AOPSS_DATA PT_LOAD;
  AOPSS_RINIT PT_LOAD;
  AOPSS_PMIC PT_LOAD;
}

SECTIONS
{
  /*================================================================================
   *
   * CODE RAM section
   *
   *================================================================================
   */
  CODE_RAM AOPSS_CODE_START :
  {
    __aop_coderam_base = .;

    KEEP(*\startup.o(.text))
    *(InRoot$$Sections .text .text*)
    *(clock_data_sec)
  } : AOPSS_CODE

  PM_CRAM_RECLAIM_POOL:
  {
    __reclaim_cram_pool_base = .;
    *(pm_cram_reclaim_pool)
    __reclaim_cram_end = .;
  } : AOPSS_CODE

  
  ASSERT(. <= AOPSS_HEAP_START, "AOPSS_CODE oversized");

  ARM_LIB_HEAP AOPSS_HEAP_START (NOLOAD) :
  {
    __aop_heap_base = .;

    . = . + AOPSS_HEAP_SIZE;

    __aop_heap_limit = .;
  }


  AOP_ULOG AOPSS_LOG_START (NOLOAD):
  {
	__aop_log_base = .;
	. = . + AOP_LOG_SIZE;
	__aop_log_limit = .;
  } : AOPSS_CODE

  DDR_ULOG DDR_LOG_START (NOLOAD):
  {
	__ddr_log_base = .;
	. = . + DDR_LOG_SIZE;
	__ddr_log_limit = .;
  } : AOPSS_CODE


  ASSERT(. <= AOPSS_CODE_END, "AOPSS_CODE oversized");

  /*================================================================================
   *
   * DATA RAM section
   *
   *================================================================================
   */
  DATA_RAM AOPSS_DATA_START :
  {
    KEEP(*\oem_uuid.o(.data*))
    KEEP(*\qc_version.o(.data*))
    KEEP(*\oem_version.o(.data*))
   __aop_image_id_end = .;
  } : AOPSS_DATA
  
  AOPSS_DATA :
  {
    KEEP(*\datetime.o (.data.gBuild*))
    *(.data .data*)
    *(.bss .bss*)
    *(.rodata .rodata*)
  } : AOPSS_DATA

  PM_DRAM_RECLAIM_POOL:
  {
    __reclaim_dram_pool_base = .;
    *(pm_dram_reclaim_pool)
    __reclaim_dram_end = .;
  } : AOPSS_DATA

  DRAM_SLEEP_CODE_POOL:
  {
    *(sleep_code_sec)
  } : AOPSS_DATA

  TASK_STACKS (NOLOAD) :
  {
    *(task_stacks) /* section for rex task stacks */
  }
  __aop_dram_size_left = AOPSS_INIT_STACK_START - .;
  PRINT(. = __aop_dram_size_left);
  ASSERT(. < AOPSS_INIT_STACK_START, "AOPSS_DATA oversized");

  ARM_LIB_STACK AOPSS_INIT_STACK_START (NOLOAD) :
  {
    . = . + AOPSS_HEAP_STACK_GUARD_BAND;

    __aop_stack_base = .;

    . = . + AOPSS_INIT_STACK_SIZE;

    __aop_stack_limit = .;
  }

 /*
  * R-INIT DATA
  */
  RINIT_DATA AOPSS_RINIT_START :
  {
    *(rinit_data_sec)        /* R-init data section for autogenerated data */
	*(pm_ddr_reclaim_pool)   /* TODO: add pm_ddr_reclaim_pool at AOPSS_PMIC_START */
    __rinit_data_end = .;
  } : AOPSS_RINIT

  ASSERT (. < AOPSS_PMIC_START, "RINIT DATA oversized");

 /*
  * PMIC DATA
  
  PMIC_DATA AOPSS_PMIC_START :
  {
    *(pm_ddr_reclaim_pool)
    __pmic_data_end = .;
  } : AOPSS_PMIC
*/
  ASSERT (. < AOPSS_RINIT_END, "PMIC DATA oversized");

  /DISCARD/ :
  {
    * (.ARM.extab*)
    * (.ARM.exid*)
    * (.got)
  }

}
