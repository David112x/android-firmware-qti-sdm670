#ifndef _TRACER_EVENT_TBL_H
#define _TRACER_EVENT_TBL_H

#include "tracer_event_ids.h"

#define EVENT_SUBSYSTEM aop

typedef struct _tracer_event_item {
	tracer_event_id_t evt_id;
	char * evt_str;
}tracer_event_item;

tracer_event_item tracer_event_tbl[] = {
	{TRACER_EVENT_RESERVE_0,""},
	{QDSS_TRACE_INITIALIZED=690,"QDSS Trace initialized"},
	{QDSS_TEST_EVENT_0,"QDSS Test event 0 no args"},
	{QDSS_TEST_EVENT_1,"QDSS Test event 1 arg1=%d"},
	{QDSS_TEST_EVENT_2,"QDSS Test event 2 arg1=%d arg2=%d"},
	{QDSS_TEST_EVENT_3,"QDSS Test event 3 arg1=%d arg2=%d arg3=%d"},
	{QDSS_TEST_EVENT_4,"QDSS Test event 4 arg1=%d arg2=%d arg3=%d arg4=%d"},
	{AOP_NON_SECURE_WD_BITE_INT_RECEIVED,"aop_abort_interrupt_received (APPS NON SECURE WD BITE) ... aborting"},
	{AOP_APPS_HANG_STATUS,"aop_apps_hang_status (Core: 0x%x) (Gladiator: 0x%x) (GIC: 0x%x) (WDOG: 0x%x)"},
	{AOP_LOG_REGISTER,"aop_log_register (PhysAddress: 0x%0.8x) (Value: 0x%0.8x)"},
	{AOP_GIC_ERR,"aop_gic_mem_corr (ERR_INT: %d), (FAULT_INT: %d)"},
	{QMP_MSG_DRVR_MAP_EXPAND,"MSG DRV: Map is expanding.Current Size: %d"},
	{CLASS_STRING_NOT_FOUND,"MSG DRV: Class string recieved was not found in map"},
	{MSG_Q_OVERFLOW,"MSG DRV: Queue overflowed"},
	{ERROR_MSG_Q_LEN,"QMP MSG: error (size: %d) > 0x64"},
	{AOP_ERR_FATAL,"aop_err_fatal (lr: 0x%0.8x) (ipsr: 0x%0.8x)"},
	{SPMI_EVENT_FIRST=79,"placeholder first spmi swevent"},
	{SPMI_EVENT_FATAL_ERROR=80,"spmi_fatal_error: (result %d) (file %x) (line %d)"},
	{SPMI_EVENT_ERROR,"spmi_error: (result %x) (file %x) (line %d)"},
	{SPMI_EVENT_WARNING,"spmi_warning: (file %x) (line %d)"},
	{SPMI_EVENT_LAST=100,"placeholder last spmi swevent"},
	{PMIC_EVENT_VRM_ERROR=513,"PMIC VRM error: log_event = %d, result = %d, rsrc_info = %d, data = %d"},
	{PMIC_EVENT_LAST=599,"PMIC last event placeholder"},
	{ddr_rail_change_handler=300,"rail_change_handler (arc: %d) (event: %d) (needs: %d) (seq_lvl: %d)"},
	{ddr_arc_continue_processing,"arc_continue_processing (arc: %d) (seq_lvl: %d)"},
	{ddr_arc_unblock_powerstate_arc,"arc_unblock_powerstate_prework (arc: %d)"},
	{ddr_arc_unblock_rm_prework,"arc_unblock_rm_prework (arc: %d) (seq_lvl: %d)"},
	{ddr_voltage_sequence_done,"voltage sequence done (arc: %d) (cur_lvl: %d) (seq_lvl: %d)"},
	{ddr_Running_Voltage_Seq,"running voltage seq (idx: %d) (mask: 0x%x)"},
	{ddr_NOT_Running_Voltage_Seq,"not running voltage seq (mx_pend: %d) (cx_pend: %d) (vdda_pend: %d)"},
	{ddr_FREQ_FSM_PROCESS_DONE,"freq_fsm process done (next_mc: %d) (next_shub: %d) (next_state: %d)"},
	{ddr_Starting_Frequency_Seq,"starting fequency seq (next_mc: %d) (next_shub: %d) (start_addr: 0x%x)"},
	{ddr_Frequency_Seq_complete,"frequency seq complete (curr_mc: %d) (curr_shub: %d)"},
	{ddr_Flush_readdata_complete,"llc flush readdata complete (mask: 0x%x)"},
	{ddr_Event_during_LLC_Flush,"event during llc flush  (event: %d) (next: %d) (status: %d) (mask: 0x%x)"},
	{ddr_MAIN_LOOP_PROCESSING,"main loop processing (signals: 0x%x)"},
	{ddr_DDR_MGR_ISR_FUNC,"ddr_mgr_isr_func isr (irq: %d) (signals 0x%x)"},
	{ddr_GET_AOP_NEEDS,"get_aop_needs           (arc: %d), (result: %d)"},
	{ddr_ARC_SEND_VOTE,"arc_send_vote           (arc: %d), (client: %d), (level: %d)"},
	{ddr_INVALID_CX_VOLTAGE_SEQ,"invalid cx voltage seq  (desired seq lvl: %d), (cx_lvl: %d)"},
	{ddr_VOLTAGE_DEPENDENCY_READY,"voltage_dependency_ready (voltage_arc_status[0]: %d), (voltage_arc_status[1]: %d), (voltage_arc_status[2]: %d), (ret_val %d)"},
	{ddr_UNBLOCK_BCM_MC,"unblock_bcm_mc          (current_mc_cp: %d), (ddr_bcm_mc_level: %d), (ddr_reg_mc_level: %d)"},
	{ddr_UNBLOCK_BCM_SHUB,"unblock_bcm_shub        (current_shub_cp: %d), (ddr_bcm_mc_level: %d), (ddr_reg_mc_level: %d)"},
	{ddr_UNBLOCK_POWERSTATE_ARC,"unblock_powerstate_arc  (current_mc_cp: %d), (ddr_rm_ack_lvl: %d), (ddr_arc_level: %d)"},
	{ddr_CMD_DB_MEM_TEST,"cmd_db_memory_test      (current_mc_cp: %d), (current_shub_cp: %d)"},
	{ddr_CMD_DB_MEM_TEST_FAIL,"cmd_db_memory_test_fail      (current_mc_cp: %d), (current_shub_cp: %d)"},
	{ddr_CMD_DB_MEM_TEST_PASS,"cmd_db_memory_test_pass      (current_mc_cp: %d), (current_shub_cp: %d)"},
	{ddr_SERVICE_FAL_TCS2,"service_fal: tcs2 used  %d"},
	{ddr_READDATA_TCS0_INUSE,"readdata: tcs 0 in use  %d"},
	{ddr_FLUSHENTRY_TCS0_INUSE,"flush_entry: tcs0 used  %d"},
	{ddr_FLUSHEXIT_TCS1_INUSE,"flush_exit: tcs1 used   %d"},
	{ddr_BADRETVAL_MSG_RAM_ADDR,"bad retval: msg_ram_get_smem_addr %d"},
	{ddr_SMEM_TABLE_RETURNS,"smem_table returns (version: major: %d, minor: %d)"},
	{ddr_LOCAL_SWITCH_LOG_INDEX,"local_switch_log_index  (local switch log index: %d), (index: %d), (freq_switch: %d)"},
	{ddr_freq_needs,"frequency resource state (pmic pending: %d), (mx: 0x%x), (cx: 0x%x) (vdda: 0x%x)"},
	{ddr_below_mol_cleared,"below mol agg cleared by solving (resource : %d), (status : 0x%x)"},
	{ddr_below_mol_not_cleared,"below mol agg not cleared by solving (resource : %d), (status : 0x%x)"},
	{DDRAUX_CLKPLAN_BRANCH,"DDR_AUX Debug (GCC_CLKPLAN: %X) (SEQ_BRANCH_EVENT: %X)"},
	{DDRAUX_SEQUENCER_STATUS,"DDR_AUX Debug (SEQn_STAT: %X) (SEQn_CFG: %X) (Instruction: %X) (Elapsed: %d)"},
	{TCS_BUSY_AT_ERROR,"TCS %d BUSY (RSI_TCSm_STAT: %X) (RSI_TCSm_CMD0: %X) (RSI_TCSm_CMD1: %X)"},
	{INVESTIGATE_SHRM_FREQUENCY,"SHRM did not respond to Frequency Cmd (TCS: %d) (RSI_TCSm_STAT: %X) (elapsed: %d)"},
	{INVESTIGATE_SHRM_VOLTAGE,"SHRM did not respond to Voltage Cmd (TCS: %d) (RSI_TCSm_STAT: %X) (elapsed: %d)"},
	{INVESTIGATE_SHRM_FLUSH,"SHRM did not respond to Flush Related cmd (RSI_TCSm_STAT: %X) (elapsed: %d)"},
	{SHRM_STATUS_AT_TIMEOUT,"SHRM status (SPROC_STATUS: %X) (APB_DEBUG_STATUS: %X)"},
	{ddr_WLAN,"apply_wlan_wa (current cx: %d) (target cx: %d), (wcssaon_config: 0x%x)"},
	{ddr_log_event_last=360,"placeholder for last ddr_mgr_event"},
	{rpmh_log_create_handle=101,"rpmh_create_handle (client: %s) (drv_id: 0x%08x)"},
	{rpmh_log_delete_handle,"rpmh_delete_handle: (client: %s) (drv_id: 0x%08x)"},
	{rpmh_log_churn_all,"rpmh_churn_all: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_churn_all_complete,"rpmh_churn_all_complete"},
	{rpmh_log_churn_single,"rpmh_churn_single: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_churn_single_complete,"rpmh_churn_single_complete"},
	{rpmh_log_barrier_all,"rpmh_barrier_all: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_barrier_all_complete,"rpmh_barrier_all_complete: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_barrier_single,"rpmh_barrier_single: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_barrier_single_complete,"rpmh_barrier_single_complete: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_notify_completion_all,"rpmh_notify_completion_all: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_notify_completion_all_complete,"rpmh_notify_completion_all_complete: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_notify_completion_single,"rpmh_notify_completion_single: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_notify_completion_single_complete,"rpmh_notify_completion_single_complete: (handle: %s) (drv_id: 0x%08x) (req_id: %d)"},
	{rpmh_log_finish_amc,"rpmh_finish_amc (hw_drv: 0x%08x) (sw_drv: 0x%08x)"},
	{rpmh_log_finished_req,"	finished req: (client: %s)(req_id: %d)"},
	{rpmh_log_no_amc_completed,"	no_amc_completed"},
	{rpmh_log_finish_amc_complete,"rpmh_finish_amc_complete"},
	{rpmh_log_issue_command_set,"rpmh_issue_command_set (client: %s)(drv_id: 0x%08x)(set: %d)(num_cmds: %d)"},
	{rpmh_log_resource_command,"	resource_command (address: 0x%08x)(data: 0x%08x)(completion: %d"},
	{rpmh_log_redundant_commands,"	redundant commands, short circuiting"},
	{rpmh_log_standalone_mode,"	standalone mode, short circuiting"},
	{rpmh_log_issue_command_set_complete,"issue_command_set_complete: (req_id %x)"},
	{rpmh_log_invalidate_command,"rpmh_invlidate_command (client: %s)(address: 0x%08x)(set: %d)"},
	{rpmh_log_issue_read_command,"rpmh_issue_read_command (client: %s)(address: 0x%08x)(polling?: %d)"},
	{rpmh_log_issue_read_command_complete,"rpmh_issue_read_command_complete (client: %s)(address: 0x%08x)(data: 0x%08x)"},
	{rpmh_log_adding_to_sleep_wake_tcs,"	adding command set to sleep/wake tcs (set: %d)"},
	{rpmh_log_adding_to_sleep_wake_amc,"	adding command set to sleep/wake amc (set: %d)"},
	{rpmh_log_enter_sleep,"rpmh_enter_sleep (drv_id: 0x%08x)"},
	{rpmh_log_enter_sleep_short_circuit,"rpmh_enter_sleep short circuit (standalone mode)"},
	{rpmh_log_flushing_amcs,"	flushing sleep amcs"},
	{rpmh_log_enter_sleep_complete,"rpmh_enter_sleep_complete"},
	{rpmh_log_exit_sleep,"rpmh_exit_sleep, flushing wake amcs (drv_id: 0x%08x)"},
	{rpmh_log_exit_sleep_short_circuit,"rpmh_exit_sleep short circuit (standalone mode)"},
	{rpmh_log_exit_sleep_complete,"rpmh_exit_sleep_complete""},
	{rpmh_log_rsc_clocks_init,"rpmh_rsc_clocks_init"},
	{rpmh_log_rsc_clocks_init_complete,"rpmh_rsc_clocks_init_complete"},
	{rpmh_log_client_init,"rpmh_client_init"},
	{rpmh_log_client_init_complete,"rpmh_client_init_complete"},
	{rpmh_log_holding_request,"	rpmh_holding_request (rcs_idle?: %d)"},
	{rpmh_log_holding_read_request,"	rpmh_holding_read_request (no free amcs?: %d)"},
	{rpmh_log_tcs_idle,"	tcs idle (tcs_id: %d)"},
	{rpmh_log_configuring_tcs,"	configuring tcs (drv_id: %d)(tcs_id: %d)(amc?: %d)"},
	{rpmh_log_configuring_tcs2,"		(client: %s)(req_id: %d)"},
	{rpmh_log_tcs_sent,"	tcs sent (tcs index: %d) (tcs_id: %d)"},
	{rpmh_log_epcb_timeout,"epcb timeout"},
	{rpmh_log_tcs_stuck,"!!!!tcs stuck!!!!"},
	{rpmh_direct_send_log,"rpmh_direct_send"},
	{rpmh_log_event_last=228,"placeholder last rpmh driver swevent"},
	{AOP_SLEEP_FIRST=600,"AOP_SLEEP_FIRST"},
	{CX_COLLAPSE_ENTER,"Entering CX collapse start"},
	{CX_COLLAPSE_EXIT,"Exiting CX collapse start"},
	{CX_COLLAPSE_ENTER_COMPLETE,"Entering CX collapse complete"},
	{CX_COLLAPSE_EXIT_COMPLETE,"Exiting CX collapse complete"},
	{AOSS_SLEEP_ENTER,"Entering AOSS Sleep: (wakeup hi: 0x%x), (wakeup_lo: 0x%x)"},
	{AOSS_SLEEP_EXIT,"Exiting AOSS Sleep"},
	{HALT_ENTER,"Entering halt: (wakeup hi: 0x%x), (wakeup_lo: 0x%x)"},
	{HALT_EXIT,"Exiting halt"},
	{IMAGE_NAME_INVALID,"PIL ERROR:Invalid image name recieved over QMP!!!  (val: %s)"},
	{PIL_MALFORMED_JSON,"PIL ERROR:Invalid JSON format, could not parse"},
	{AOP_SLEEP_LAST=680,"AOP_SLEEP_LAST"},
	{RAMDUMP_FATAL_ERROR=383,"fatal_error... DDR_On:%d ...init RAM DUMP"},
	{CLOCK_EVENT_FIRST=384,"Clock first event placeholder"},
	{CLOCK_EVENT_INIT,"Clock Initialize"},
	{CLOCK_EVENT_POWER_COLLAPSE,"Clock Power Collapse: %plugin[3]<clock>."},
	{CLOCK_EVENT_POWER_RESTORE,"Clock Power Restore:  %plugin[3]<clock>."},
	{CLOCK_EVENT_PSCBC_CHECK,"Clock PSCBC ON at XO shutdown (CBCR_ADDR) : 0x%x = 0x%x"},
	{CLOCK_EVENT_LAST=511,"Clock last event placeholder"},
	{TRACER_EVENT_ID_MAX,""}
};

#endif // _TRACER_EVENT_TBL_H
