# indent = tab, tabstop = 4
#===========================================================================
#                             arc_rm_seq.rinit
#
#  DESCRIPTION:
#    This file provides settings for ARC RMs and sequencer.
#
#  Copyright (c) 2016 QUALCOMM Technologies, Inc. (QTI). All Rights Reserved.  
#  QUALCOMM Proprietary.  Export of this technology or software is regulated 
#  by the U.S. Government. Diversion contrary to U.S. law prohibited.
#===========================================================================

# History
# Desc		            commit ID 		date
# Initial warlok seq        4a89ed1	       9/25/17

# Sequence memory initialization
module : { name = RPMH_ARC_ARC_SEQ_MEM, group = ARC }
vars:
	  # ARC sequences
    arc_seqs = [     # 16 bit sequencer
        0x29423d00,			#0x0       : 0x3D00   	DOWNSequence0: 			    BEQR SWWR_PRE=1 SWWR_PRE
    						#0x2       : 0x2942   								BEQ APM_DOWNSW=1 APM_SWITCHDN
        0x1c065002,			#0x4       : 0x5002   								SET1 rm_acc_pre_req
    						#0x6       : 0x1C06   								CALL HWAUXPRE
        0x1c073883,			#0x8       : 0x3883   								BEQR MOL2BMOL=1 ISO
    						#0xa       : 0x1C07   								CALL HWAUXMAIN
        0x70105009,			#0xc       : 0x5009   								SET1 arc_cprf_post_req
    						#0xe       : 0x7010   								WAIT1 cprf_arc_post_ack
        0x00074009,			#0x10      : 0x4009   								SET0 arc_cprf_post_req
    						#0x12      : 0x0007   								DELI 10036ns
        0x7009500e,			#0x14      : 0x500E   								SET1 rm_pv_post_req
    						#0x16      : 0x7009   								WAIT1 pv_rm_ack9
        0x500a400e,			#0x18      : 0x400E   								SET0 rm_pv_post_req
    						#0x1a      : 0x500A   								SET1 arc_ddraux_post_req
        0x400a7011,			#0x1c      : 0x7011   								WAIT1 ddraux_arc_post_ack
    						#0x1e      : 0x400A   								SET0 arc_ddraux_post_req
        0x40023d41,			#0x20      : 0x3D41   								BEQR SWWR_POST=1 SWWR_POST
    						#0x22      : 0x4002   								SET0 rm_acc_pre_req
        0x3d001000,			#0x24      : 0x1000   								RETURN
    						#0x26      : 0x3D00   	UPSequence0: 				BEQR SWWR_PRE=1 SWWR_PRE
        0x1c071c06,			#0x28      : 0x1C06   								CALL HWAUXPRE
    						#0x2a      : 0x1C07   								CALL HWAUXMAIN
        0x7009500e,			#0x2c      : 0x500E   								SET1 rm_pv_post_req
    						#0x2e      : 0x7009   								WAIT1 pv_rm_ack9
        0x3dce400e,			#0x30      : 0x400E   								SET0 rm_pv_post_req
    						#0x32      : 0x3DCE   								BEQR SWWR_CX_APM_SWITCHUP=1 APM_SWITCHUP
        0x3884500d,			#0x34      : 0x500D   								SET1 rm_acc_post_req
    						#0x36      : 0x3884   								BEQR BMOL2MOL=1 DEISO
        0x50090002,			#0x38      : 0x0002   								DELI 104ns
    						#0x3a      : 0x5009   								SET1 arc_cprf_post_req
        0x40097010,			#0x3c      : 0x7010   								WAIT1 cprf_arc_post_ack
    						#0x3e      : 0x4009   								SET0 arc_cprf_post_req
        0x500a0007,			#0x40      : 0x0007   								DELI 10036ns
    						#0x42      : 0x500A   								SET1 arc_ddraux_post_req
        0x400a7011,			#0x44      : 0x7011   								WAIT1 ddraux_arc_post_ack
    						#0x46      : 0x400A   								SET0 arc_ddraux_post_req
        0x400d3d41,			#0x48      : 0x3D41   								BEQR SWWR_POST=1 SWWR_POST
    						#0x4a      : 0x400D   								SET0 rm_acc_post_req
        0x50051000,			#0x4c      : 0x1000   								RETURN
    						#0x4e      : 0x5005   	XODownSequence: 			SET1 arc_cprf_pre_req
        0x4005700c,			#0x50      : 0x700C   								WAIT1 cprf_arc_pre_ack
    						#0x52      : 0x4005   								SET0 arc_cprf_pre_req
        0x501c3e0d,			#0x54      : 0x3E0D   								BEQR WLAN_EN=1 WLAN_DEL
    						#0x56      : 0x501C   								SET1 arc_pwr_rail_clk_gating
        0x000d000d,			#0x58      : 0x000D   								DELI 100048ns
    						#0x5a      : 0x000D   								DELI 100048ns
        0x501f000c,			#0x5c      : 0x000C   								DELI 50024ns
    						#0x5e      : 0x501F   								SET1 arc_cxo_pad_disable
        0x3988000d,			#0x60      : 0x000D   								DELI 100048ns
    						#0x62      : 0x3988   								BEQR XOBELOW2D=1 GCNT_TO_SLEEP
        0x70095001,			#0x64      : 0x5001   								SET1 rm_pv_pre_req
    						#0x66      : 0x7009   								WAIT1 pv_rm_ack9
        0x50074001,			#0x68      : 0x4001   								SET0 rm_pv_pre_req
    						#0x6a      : 0x5007   								SET1 arc_cprf_change_req
        0x4007700e,			#0x6c      : 0x700E   								WAIT1 cprf_arc_change_ack
    						#0x6e      : 0x4007   								SET0 arc_cprf_change_req
        0x70105009,			#0x70      : 0x5009   								SET1 arc_cprf_post_req
    						#0x72      : 0x7010   								WAIT1 cprf_arc_post_ack
        0x10004009,			#0x74      : 0x4009   								SET0 arc_cprf_post_req
    						#0x76      : 0x1000   								RETURN
        0x700c5005,			#0x78      : 0x5005   	XOUPSequence: 				SET1 arc_cprf_pre_req
    						#0x7a      : 0x700C   								WAIT1 cprf_arc_pre_ack
        0x50014005,			#0x7c      : 0x4005   								SET0 arc_cprf_pre_req
    						#0x7e      : 0x5001   								SET1 rm_pv_pre_req
        0x40017009,			#0x80      : 0x7009   								WAIT1 pv_rm_ack9
    						#0x82      : 0x4001   								SET0 rm_pv_pre_req
        0x388a39c9,			#0x84      : 0x39C9   								BEQR XOABOVE1=1 GCNT_FROM_SLEEP
    						#0x86      : 0x388A   								BEQR BMOL2MOL=1 TURN_ON_PAD
        0x700e5007,			#0x88      : 0x5007   								SET1 arc_cprf_change_req
    						#0x8a      : 0x700E   								WAIT1 cprf_arc_change_ack
        0x50094007,			#0x8c      : 0x4007   								SET0 arc_cprf_change_req
    						#0x8e      : 0x5009   								SET1 arc_cprf_post_req
        0x40097010,			#0x90      : 0x7010   								WAIT1 cprf_arc_post_ack
    						#0x92      : 0x4009   								SET0 arc_cprf_post_req
        0x18001000,			#0x94      : 0x1000   								RETURN
    						#0x96      : 0x1800   	DDRSSSequence: 				JMP SWWR_PRE
        0x400f500f,			#0x98      : 0x500F   	SWWR_PRE: 					SET1 arc_aop_pre_int
    						#0x9a      : 0x400F   								SET0 arc_aop_pre_int
        0x10007016,			#0x9c      : 0x7016   								WAIT1 csr_unblock_seq_pre
    						#0x9e      : 0x1000   								RETURN
        0x40115011,			#0xa0      : 0x5011   	SWWR_POST: 					SET1 arc_aop_post_int
    						#0xa2      : 0x4011   								SET0 arc_aop_post_int
        0x10007017,			#0xa4      : 0x7017   								WAIT1 csr_unblock_seq_post
    						#0xa6      : 0x1000   								RETURN
        0x7014501d,			#0xa8      : 0x501D   	APM_SWITCHDN: 				SET1 arc_apm_start_switch
    						#0xaa      : 0x7014   								WAIT1 apm_arc_switch_done
        0x5001401d,			#0xac      : 0x401D   								SET0 arc_apm_start_switch
    						#0xae      : 0x5001   								SET1 rm_pv_pre_req
        0x40017009,			#0xb0      : 0x7009   								WAIT1 pv_rm_ack9
    						#0xb2      : 0x4001   								SET0 rm_pv_pre_req
        0x10003d41,			#0xb4      : 0x3D41   								BEQR SWWR_POST=1 SWWR_POST
    						#0xb6      : 0x1000   								RETURN
        0x3c0b3e0d,			#0xb8      : 0x3E0D   	ISO: 						BEQR WLAN_EN=1 WLAN_DEL
    						#0xba      : 0x3C0B   								BEQR CX=1 CX_CLK_DIS
        0x3c0f5012,			#0xbc      : 0x5012   								SET1 arc_iso_input
    						#0xbe      : 0x3C0F   								BEQR CX=1 WAIT_SLEEP_CLK_DIS
        0x50135015,			#0xc0      : 0x5015   								SET1 arc_clamp_mem
    						#0xc2      : 0x5013   								SET1 arc_ret_0pin
        0x40145014,			#0xc4      : 0x5014   								SET1 arc_save_ff
    						#0xc6      : 0x4014   								SET0 arc_save_ff
        0x50175016,			#0xc8      : 0x5016   								SET1 arc_iso_output
    						#0xca      : 0x5017   								SET1 arc_freeze_output_early
        0x00025018,			#0xcc      : 0x5018   								SET1 arc_freeze_output
    						#0xce      : 0x0002   								DELI 104ns
        0x3d851000,			#0xd0      : 0x1000   								RETURN
    						#0xd2      : 0x3D85   	DEISO: 						BEQR SWWR_CX_RESET_FF=1 RESET
        0x401a501a,			#0xd4      : 0x501A   								SET1 arc_restore_ff
    						#0xd6      : 0x401A   								SET0 arc_restore_ff
		0x00034015,			#0xd8      : 0x4015   								SET0 arc_clamp_mem
							#0xda      : 0x0003   								DELI 208ns
		0x50235022,			#0xdc      : 0x5022   								SET1 aoss_cs_n_mask
							#0xde      : 0x5023   								SET1 aoss_wl_en_clk
		0x40224023,			#0xe0      : 0x4023   								SET0 aoss_wl_en_clk
							#0xe2      : 0x4022   								SET0 aoss_cs_n_mask
		0x40164013,			#0xe4      : 0x4013   								SET0 arc_ret_0pin
							#0xe6      : 0x4016   								SET0 arc_iso_output
		0x40184017,			#0xe8      : 0x4017   								SET0 arc_freeze_output_early
							#0xea      : 0x4018   								SET0 arc_freeze_output
		0x3c0c4012,			#0xec      : 0x4012   								SET0 arc_iso_input
							#0xee      : 0x3C0C   								BEQR CX=1 CX_CLK_EN
		0x501a1000,			#0xf0      : 0x1000   								RETURN
							#0xf2      : 0x501A   	RESET: 						SET1 arc_restore_ff
		0x50190003,			#0xf4      : 0x0003   								DELI 208ns
							#0xf6      : 0x5019   								SET1 arc_pwr_up_rst
		0x40190003,			#0xf8      : 0x0003   								DELI 208ns
							#0xfa      : 0x4019   								SET0 arc_pwr_up_rst
		0x50061000,			#0xfc      : 0x1000   								RETURN
							#0xfe      : 0x5006   	HWAUXPRE: 					SET1 arc_ddraux_pre_req
		0x700d5005,			#0x100     : 0x5005   								SET1 arc_cprf_pre_req
							#0x102     : 0x700D   								WAIT1 ddraux_arc_pre_ack
		0x700c4006,			#0x104     : 0x4006   								SET0 arc_ddraux_pre_req
							#0x106     : 0x700C   								WAIT1 cprf_arc_pre_ack
		0x10004005,			#0x108     : 0x4005   								SET0 arc_cprf_pre_req
							#0x10a     : 0x1000   								RETURN
		0x70095001,			#0x10c     : 0x5001   	HWAUXMAIN: 					SET1 rm_pv_pre_req
							#0x10e     : 0x7009   								WAIT1 pv_rm_ack9
		0x50084001,			#0x110     : 0x4001   								SET0 rm_pv_pre_req
							#0x112     : 0x5008   								SET1 arc_ddraux_change_req
		0x700f5007,			#0x114     : 0x5007   								SET1 arc_cprf_change_req
							#0x116     : 0x700F   								WAIT1 ddraux_arc_change_ack
		0x700e4008,			#0x118     : 0x4008   								SET0 arc_ddraux_change_req
							#0x11a     : 0x700E   								WAIT1 cprf_arc_change_ack
		0x10004007,			#0x11c     : 0x4007   								SET0 arc_cprf_change_req
							#0x11e     : 0x1000   								RETURN
		0x70155020,			#0x120     : 0x5020   	GCNT_TO_SLEEP: 				SET1 arc_global_cnt_clk_sel
							#0x122     : 0x7015   								WAIT1 global_cnt_arc_ack
		0x40201000,			#0x124     : 0x1000   								RETURN
							#0x126     : 0x4020   	GCNT_FROM_SLEEP: 			SET0 arc_global_cnt_clk_sel
		0x10006015,			#0x128     : 0x6015   								WAIT0 global_cnt_arc_ack
							#0x12a     : 0x1000   								RETURN
		0x401c401f,			#0x12c     : 0x401F   	TURN_ON_PAD: 				SET0 arc_cxo_pad_disable
							#0x12e     : 0x401C   								SET0 arc_pwr_rail_clk_gating
		0x501c1000,			#0x130     : 0x1000   								RETURN
							#0x132     : 0x501C   	CX_CLK_DIS: 				SET1 arc_pwr_rail_clk_gating
		0x000d000d,			#0x134     : 0x000D   								DELI 100048ns
							#0x136     : 0x000D   								DELI 100048ns
		0x1000000c,			#0x138     : 0x000C   								DELI 50024ns
    						#0x13a     : 0x1000   								RETURN
		0x1000401c,			#0x13c     : 0x401C   	CX_CLK_EN: 					SET0 arc_pwr_rail_clk_gating
							#0x13e     : 0x1000   								RETURN
		0x0009000c,			#0x140     : 0x000C   	WLAN_DEL: 					DELI 50024ns
							#0x142     : 0x0009   								DELI 20020ns
		0x501d1000,			#0x144     : 0x1000   								RETURN
							#0x146     : 0x501D   	APM_SWITCHUP: 				SET1 arc_apm_start_switch
		0x401d7014,			#0x148     : 0x7014   								WAIT1 apm_arc_switch_done
							#0x14a     : 0x401D   								SET0 arc_apm_start_switch
		0x000d1000,			#0x14c     : 0x1000   								RETURN
							#0x14e     : 0x000D   	WAIT_SLEEP_CLK_DIS: 		DELI 100048ns
		0x00001000, 		#0x150     : 0x1000 								RETURN
    ]
 
regs:
	SEQ_MEM_i = arc_seqs


module: { name = RPMH_ARC_ARC_RM, group = ARC }
vars:
	# Sequence offsets within sequence memory 
	DOWNSequence0 = 0x0
    UPSequence0 = 0x26
    XODownSequence = 0x4e
    XOUPSequence = 0x78
    DDRSSSequence = 0x96

	# branch offsets within sequence memory 
    SWWR_PRE = 0x98
    SWWR_POST = 0xa0
    APM_SWITCHDN = 0xa8
    ISO = 0xb8
    DEISO = 0xd2
	RESET = 0xf2
	HWAUXPRE = 0xfe
	HWAUXMAIN = 0x10c
	GCNT_TO_SLEEP = 0x120
	GCNT_FROM_SLEEP = 0x126
	TURN_ON_PAD = 0x12c
	CX_CLK_DIS = 0x132
	CX_CLK_EN = 0x13c
	WLAN_DEL = 0x140
	APM_SWITCHUP = 0x146
	WAIT_SLEEP_CLK_DIS = 0x14e

	br_addrs = [
		SWWR_PRE, SWWR_POST, APM_SWITCHDN, ISO,
		DEISO, RESET, HWAUXPRE, HWAUXMAIN, 
		GCNT_TO_SLEEP, GCNT_FROM_SLEEP, TURN_ON_PAD, CX_CLK_DIS,
		CX_CLK_EN, WLAN_DEL, APM_SWITCHUP, WAIT_SLEEP_CLK_DIS
	]

regs:
	# RM 0-2 - Enable AGGR interrupt for Cx/Mx/DDR dependency
	# enabled via runtime code 
	#RMm_AGGR_BLOCK_EN = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    #
	#RMm_OPERATIONAL_LEVEL = [
	#	{ 0x6, 0x0, 0x6, 0x6, 0x6 },
	#	{ 0x3, 0x0, 0x3, 0x3, 0x3 },
	#	{ 0x0, 0x0, 0x0, 0x0, 0x0 },    # No EBI rail for warlokc, program POR values
	#	{ 0x6, 0x0, 0x6, 0x6, 0x6 },
	#	{ 0x3, 0x0, 0x3, 0x3, 0x3 },
	#	{ 0x0, 0x0, 0x0, 0x0, 0x0 },	# GFx is kept off
	#	{ 0x6, 0x0, 0x6, 0x6, 0x6 }, 
	#	{ 0x3, 0x0, 0x3, 0x3, 0x3 },
	#	{ 0x3, 0x0, 0x3, 0x3, 0x3 },
	#]

	# Sequence UP branch addresses/offsets
	RMm_SEQ_UP_BR_ADDRi[0] = br_addrs
	RMm_SEQ_UP_BR_ADDRi[1] = br_addrs
	RMm_SEQ_UP_BR_ADDRi[3] = br_addrs
	RMm_SEQ_UP_BR_ADDRi[4] = br_addrs
	RMm_SEQ_UP_BR_ADDRi[5] = br_addrs
	RMm_SEQ_UP_BR_ADDRi[6] = br_addrs
	RMm_SEQ_UP_BR_ADDRi[7] = br_addrs
	RMm_SEQ_UP_BR_ADDRi[8] = br_addrs

	# Sequence DOWN branch addresses/offsets
	RMm_SEQ_DOWN_BR_ADDRi[0] = br_addrs
	RMm_SEQ_DOWN_BR_ADDRi[1] = br_addrs
	RMm_SEQ_DOWN_BR_ADDRi[3] = br_addrs
	RMm_SEQ_DOWN_BR_ADDRi[4] = br_addrs
	RMm_SEQ_DOWN_BR_ADDRi[5] = br_addrs
	RMm_SEQ_DOWN_BR_ADDRi[6] = br_addrs
	RMm_SEQ_DOWN_BR_ADDRi[7] = br_addrs
	RMm_SEQ_DOWN_BR_ADDRi[8] = br_addrs

	# UP Sequence addresses
	RMm_SEQ_UP_START_ADDR[0] = UPSequence0
	RMm_SEQ_UP_START_ADDR[1] = UPSequence0
	RMm_SEQ_UP_START_ADDR[3] = UPSequence0
	RMm_SEQ_UP_START_ADDR[4] = UPSequence0
	RMm_SEQ_UP_START_ADDR[5] = UPSequence0
	RMm_SEQ_UP_START_ADDR[6] = UPSequence0
	RMm_SEQ_UP_START_ADDR[7] = DDRSSSequence
	RMm_SEQ_UP_START_ADDR[8] = XOUPSequence

	# Down Sequence address
	RMm_SEQ_DOWN_START_ADDR[0] = DOWNSequence0 
	RMm_SEQ_DOWN_START_ADDR[1] = DOWNSequence0 
	RMm_SEQ_DOWN_START_ADDR[3] = DOWNSequence0 
	RMm_SEQ_DOWN_START_ADDR[4] = DOWNSequence0 
	RMm_SEQ_DOWN_START_ADDR[5] = DOWNSequence0 
	RMm_SEQ_DOWN_START_ADDR[6] = DOWNSequence0 
	RMm_SEQ_DOWN_START_ADDR[7] = DDRSSSequence
	RMm_SEQ_DOWN_START_ADDR[8] = XODownSequence

	# SW Conf Event - static    # DBG: add SWWR_PRE for RM0,1,2.
	SW_CONF_EVENT[0] = 0x9		# IS_CX | IS_DDR (for DDR Aux communication)
	SW_CONF_EVENT[1] = 0x8		# IS_DDR (for DDR Aux communication)
	SW_CONF_EVENT[2] = 0x8		# IS_DDR
	SW_CONF_EVENT[7] = 0x10		# SWWR_PRE - DDR Resource uses PRE_WORK irq
	SW_CONF_EVENT[8] = 0x2		# IS_CXO

	# No Branch addresses for SW conf events - so far

	# Solver configuration - Seed values only - needs characterization per RM.
	# CX_RM
	SOLVER_TABLE_MODE[0] = [
		{0x2580, 0},	# 1.5 msec, off to Turbo (AOP handles transition)
		{0xB40, 1},		# 150 usec, Ret to Turbo 
		{0x0, 2},		# 0 usec, MOL - (min_)svs
		{0x0, 2},		# 0 usec, MOL - (min_)svs
		{0x0, 2},		# 0 usec, MOL - (min_)svs
		{0x0, 2}		# 0 usec, MOL - (min_)svs
	]
	MIN_SLEEP_TIME[0] = [ 0xBB80, 0x1680, 0x0, 0x0, 0x0, 0x0 ]

	# MX_RM
	SOLVER_TABLE_MODE[1] = [
		# MX is not allowed to be turned off.
		{0x1A80, 1},	# 350 usec, Ret to Turbo (100 us for AOP + 200 us DDR)
		{0x1A80, 2},	# 350 usec, SVS_L1 to Turbo
		{0x0, 3},	# 0 usec, MOL - Nominal
		{0x0, 3},       # 0 usec, MOL - Nominal
		{0x0, 3},	# 0 usec, MOL - Nominal
		{0x0, 3},	# 0 usec, MOL - Nominal
	]
	# Backoff x 2
	MIN_SLEEP_TIME[1] = [ 0xBB80, 0xBB80, 0x0, 0x0, 0x0, 0x0 ]

	# SSC_Cx
	SOLVER_TABLE_MODE[3] = [
		{0x2580, 0},			# 500 usec, Off to MOL + AOP for parent/child.
		{0x1680, 1},			# 300 usec, Ret to MOL + AOP for parent/child.
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
	]
	# Backoff x 1.5
	MIN_SLEEP_TIME[3] = [ 0xBB80, 0x0B40, 0x0, 0x0, 0x0, 0x0 ] 

	# SSC_Mx
	SOLVER_TABLE_MODE[4] = [
		{0x2580, 0},			# 500 usec, Off to MOL + AOP for parent/child.
		{0x1680, 1},			# 300 usec, Ret to MOL + AOP for parent/child.
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
	]
	# Backoff x 1.5
	MIN_SLEEP_TIME[4] = [ 0x3840, 0x21C0, 0x0, 0x0, 0x0, 0x0 ]

	# GFx
	SOLVER_TABLE_MODE[5] = [
		{0x2D00, 0},			# 600 usec, off
		{0xF00, 1},				# 200 usec, Ret
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2}				# 0 usec, MOL - (min_)svs
	]
	# Backoff x 1.5
	MIN_SLEEP_TIME[5] = [ 0x4380, 0x1680, 0x0, 0x0, 0x0, 0x0 ]

	# MSS
	SOLVER_TABLE_MODE[6] = [
		{0x2D00, 0},			# 600 usec, off to MOL
		{0xF00, 1},				# 200 usec, Ret to MOL
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2},				# 0 usec, MOL - (min_)svs
		{0x0, 2}				# 0 usec, MOL - (min_)svs
	]
	# Backoff x 1.5
	MIN_SLEEP_TIME[6] = [ 0x4380, 0x1680, 0x0, 0x0, 0x0, 0x0 ]

	# DDR_SS
	SOLVER_TABLE_MODE[7] = [
        {0x99C0, 0},    # 2.05 msec, D3 with SHRM Gated, SC flush worst case - collapse 
        {0x99C0, 1},    # 2.05 msec, D3 (same work as above) - assume DDR is collapsed  
		{0x780, 2},				# 100 usec, D0.5
		{0x0, 3},				# 0 usec, Active (= D0?)
		{0x0, 3},				# 0 usec, Active (= D0?)
		{0x0, 3}				# 0 usec, Active (= D0?)
	]
	# Backoff x 2
    MIN_SLEEP_TIME[7] = [ 0xA8C0, 0xAC80, 0xF00, 0x0, 0x0, 0x0 ]

	# XO
	SOLVER_TABLE_MODE[8] = [
		#{0x2EE00, 0},			# 10 msec, Crystal off - UNUSED
        {0x99C0, 1},    # 2.05 msec, PMIC buffer off; 250us before MAX(DDR,CX).
		{0xC0, 2},				# 10 usec, SoC buffer off
		{0x0, 3},				# 0 usec, On
		{0x0, 3},				# 0 usec, On
		{0x0, 3},				# 0 usec, On
		{0x0, 3},				# 0 usec, On
	]
	# Backoff x 2
    MIN_SLEEP_TIME[8] = [ 0xA8C0, 0x180, 0x0, 0x0, 0x0, 0x0 ]
	

	#ARC_RMm_CTRL = [
	#	# En, Ret, MOL
	#	{1, 1, 2},		# Cx
	#	{1, 1, 3},		# Mx
	#	{0, 0, 0},		# No DDR Rail for warlock.
	#	{1, 1, 2},		# SSC_Cx
	#	{1, 1, 2},		# SSC_Mx
	#	{1, 1, 2},		# GFx
	#	{1, 1, 2},		# MSS
	#	{1, 2, 3},		# DDR_SS
	#	{1, 3, 3}		# XO
	#]

module: { name = RPMH_ARC_ARC_SW_OVERRIDE, group = ARC }
regs:
        WAIT_EVENT_MASK = 0x000000         # For the apm_arc_switch_done event
        WAIT_EVENT_VAL  = 0x000000         # Auto ack the event

module: { name = RPMH_ARC_ARC_RM, group = ARC_WL }
regs:
	# RM 0-2 - Enable AGGR interrupt for Cx/Mx/DDR dependency
	# enabled via runtime code 
	RMm_AGGR_BLOCK_EN = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

	RMm_OPERATIONAL_LEVEL = [
		{ 0x6, 0x0, 0x6, 0x6, 0x6 },
		{ 0x3, 0x0, 0x3, 0x3, 0x3 },
		{ 0x0, 0x0, 0x0, 0x0, 0x0 },    # No EBI rail for warlokc, program POR values
		{ 0x6, 0x0, 0x6, 0x6, 0x6 },
		{ 0x3, 0x0, 0x3, 0x3, 0x3 },
		{ 0x0, 0x0, 0x0, 0x0, 0x0 },	# GFx is kept off
		{ 0x6, 0x0, 0x6, 0x6, 0x6 }, 
		{ 0x3, 0x0, 0x3, 0x3, 0x3 },
		{ 0x3, 0x0, 0x3, 0x3, 0x3 },
	]

	ARC_RMm_CTRL = [
		# En, Ret, MOL
		{1, 1, 2},		# Cx
		{1, 1, 3},		# Mx
		{0, 0, 0},		# No DDR Rail for warlock.
		{1, 1, 2},		# SSC_Cx
		{1, 1, 2},		# SSC_Mx
		{1, 1, 2},		# GFx
		{1, 1, 2},		# MSS
		{1, 2, 3},		# DDR_SS
		{1, 3, 3}		# XO
	]

module: { name = RPMH_ARC_ARC_RM, group = ARC_RD }
regs:
	# RM 0-2 - Enable AGGR interrupt for Cx/Mx/DDR dependency
	# enabled via runtime code 
	RMm_AGGR_BLOCK_EN = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

	RMm_OPERATIONAL_LEVEL = [
		{ 0x7, 0x0, 0x7, 0x7, 0x7 },
		{ 0x4, 0x0, 0x4, 0x4, 0x4 },
		{ 0x0, 0x0, 0x0, 0x0, 0x0 },    # No EBI rail for warlokc, program POR values
		{ 0x6, 0x0, 0x6, 0x6, 0x6 },
		{ 0x3, 0x0, 0x3, 0x3, 0x3 },
		{ 0x0, 0x0, 0x0, 0x0, 0x0 },	# GFx is kept off
		{ 0x6, 0x0, 0x6, 0x6, 0x6 }, 
		{ 0x3, 0x0, 0x3, 0x3, 0x3 },
		{ 0x3, 0x0, 0x3, 0x3, 0x3 },
	]

	ARC_RMm_CTRL = [
		# En, Ret, MOL
		{1, 1, 2},		# Cx
		{1, 1, 3},		# Mx
		{0, 0, 0},		# No DDR Rail for warlock.
		{1, 1, 2},		# SSC_Cx
		{1, 1, 2},		# SSC_Mx
		{1, 1, 2},		# GFx
		{1, 1, 2},		# MSS
		{1, 2, 3},		# DDR_SS
		{1, 3, 3}		# XO
	]